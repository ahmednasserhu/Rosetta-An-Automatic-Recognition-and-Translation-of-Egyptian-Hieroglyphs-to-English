# -*- coding: utf-8 -*-
"""rule based algorthim

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12AXCBeZAFnCIzL9xt0fysfKzFSziWysR
"""

import pandas as pd

def load_dictionary_from_excel(file_path):
    # Load the Excel file into a DataFrame
    df = pd.read_excel(file_path)

    # Assuming the Excel columns are named "Word" and "Mapping"
    dictionary = {}
    for index, row in df.iterrows():
        word = str(row['Gardiner'])
        mapping = str(row['Transliteration'])
        dictionary[word] = mapping

    return dictionary

def forward_maximum_segmentation(text, dictionary):
    segmented_words = []
    i = 0
    while i < len(text):
        found_word = False
        for j in range(len(text), i, -1):
            # Try to find the longest possible word starting from position i
            word = text[i:j]
            if word in dictionary:
                segmented_words.append(dictionary[word])
                i = j
                found_word = True
                break

        # If no word is found, treat the current character as a separate word
        if not found_word:
            segmented_words.append(text[i])
            i += 1

    return segmented_words

# Example usage
file_path = "D:/GP/models/ancient_egypt_dictionary_compiled.xlsx"  # Update with the path to your Excel file
dictionary = load_dictionary_from_excel(file_path)

text = "D52-E1-Z1-N35-V37D21-Z1-M17-D46-D21-V37Y1"
segmented_words = forward_maximum_segmentation(text, dictionary)

mapped_words = []
for word in segmented_words:
    if word in dictionary:
        mapped_words.append(dictionary[word])
    else:
        mapped_words.append(word)

print(mapped_words)

